// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConsumedProof extends ethereum.Event {
  get params(): ConsumedProof__Params {
    return new ConsumedProof__Params(this);
  }
}

export class ConsumedProof__Params {
  _event: ConsumedProof;

  constructor(event: ConsumedProof) {
    this._event = event;
  }

  get _receiptId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class NearToEthTransferFinalised extends ethereum.Event {
  get params(): NearToEthTransferFinalised__Params {
    return new NearToEthTransferFinalised__Params(this);
  }
}

export class NearToEthTransferFinalised__Params {
  _event: NearToEthTransferFinalised;

  constructor(event: NearToEthTransferFinalised) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferToNearInitiated extends ethereum.Event {
  get params(): TransferToNearInitiated__Params {
    return new TransferToNearInitiated__Params(this);
  }
}

export class TransferToNearInitiated__Params {
  _event: TransferToNearInitiated;

  constructor(event: TransferToNearInitiated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accountId(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class eNear extends ethereum.SmartContract {
  static bind(address: Address): eNear {
    return new eNear("eNear", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minBlockAcceptanceHeight(): BigInt {
    let result = super.call(
      "minBlockAcceptanceHeight",
      "minBlockAcceptanceHeight():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBlockAcceptanceHeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBlockAcceptanceHeight",
      "minBlockAcceptanceHeight():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nearConnector(): Bytes {
    let result = super.call("nearConnector", "nearConnector():(bytes)", []);

    return result[0].toBytes();
  }

  try_nearConnector(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("nearConnector", "nearConnector():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): BigInt {
    let result = super.call("paused", "paused():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paused(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paused", "paused():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prover(): Address {
    let result = super.call("prover", "prover():(address)", []);

    return result[0].toAddress();
  }

  try_prover(): ethereum.CallResult<Address> {
    let result = super.tryCall("prover", "prover():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  usedProofs(param0: Bytes): boolean {
    let result = super.call("usedProofs", "usedProofs(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_usedProofs(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("usedProofs", "usedProofs(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _nearConnector(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _prover(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minBlockAcceptanceHeight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _admin(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _pausedFlags(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdminDelegatecallCall extends ethereum.Call {
  get inputs(): AdminDelegatecallCall__Inputs {
    return new AdminDelegatecallCall__Inputs(this);
  }

  get outputs(): AdminDelegatecallCall__Outputs {
    return new AdminDelegatecallCall__Outputs(this);
  }
}

export class AdminDelegatecallCall__Inputs {
  _call: AdminDelegatecallCall;

  constructor(call: AdminDelegatecallCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AdminDelegatecallCall__Outputs {
  _call: AdminDelegatecallCall;

  constructor(call: AdminDelegatecallCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AdminPauseCall extends ethereum.Call {
  get inputs(): AdminPauseCall__Inputs {
    return new AdminPauseCall__Inputs(this);
  }

  get outputs(): AdminPauseCall__Outputs {
    return new AdminPauseCall__Outputs(this);
  }
}

export class AdminPauseCall__Inputs {
  _call: AdminPauseCall;

  constructor(call: AdminPauseCall) {
    this._call = call;
  }

  get flags(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AdminPauseCall__Outputs {
  _call: AdminPauseCall;

  constructor(call: AdminPauseCall) {
    this._call = call;
  }
}

export class AdminReceiveEthCall extends ethereum.Call {
  get inputs(): AdminReceiveEthCall__Inputs {
    return new AdminReceiveEthCall__Inputs(this);
  }

  get outputs(): AdminReceiveEthCall__Outputs {
    return new AdminReceiveEthCall__Outputs(this);
  }
}

export class AdminReceiveEthCall__Inputs {
  _call: AdminReceiveEthCall;

  constructor(call: AdminReceiveEthCall) {
    this._call = call;
  }
}

export class AdminReceiveEthCall__Outputs {
  _call: AdminReceiveEthCall;

  constructor(call: AdminReceiveEthCall) {
    this._call = call;
  }
}

export class AdminSendEthCall extends ethereum.Call {
  get inputs(): AdminSendEthCall__Inputs {
    return new AdminSendEthCall__Inputs(this);
  }

  get outputs(): AdminSendEthCall__Outputs {
    return new AdminSendEthCall__Outputs(this);
  }
}

export class AdminSendEthCall__Inputs {
  _call: AdminSendEthCall;

  constructor(call: AdminSendEthCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdminSendEthCall__Outputs {
  _call: AdminSendEthCall;

  constructor(call: AdminSendEthCall) {
    this._call = call;
  }
}

export class AdminSstoreCall extends ethereum.Call {
  get inputs(): AdminSstoreCall__Inputs {
    return new AdminSstoreCall__Inputs(this);
  }

  get outputs(): AdminSstoreCall__Outputs {
    return new AdminSstoreCall__Outputs(this);
  }
}

export class AdminSstoreCall__Inputs {
  _call: AdminSstoreCall;

  constructor(call: AdminSstoreCall) {
    this._call = call;
  }

  get key(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdminSstoreCall__Outputs {
  _call: AdminSstoreCall;

  constructor(call: AdminSstoreCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FinaliseNearToEthTransferCall extends ethereum.Call {
  get inputs(): FinaliseNearToEthTransferCall__Inputs {
    return new FinaliseNearToEthTransferCall__Inputs(this);
  }

  get outputs(): FinaliseNearToEthTransferCall__Outputs {
    return new FinaliseNearToEthTransferCall__Outputs(this);
  }
}

export class FinaliseNearToEthTransferCall__Inputs {
  _call: FinaliseNearToEthTransferCall;

  constructor(call: FinaliseNearToEthTransferCall) {
    this._call = call;
  }

  get proofData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get proofBlockHeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FinaliseNearToEthTransferCall__Outputs {
  _call: FinaliseNearToEthTransferCall;

  constructor(call: FinaliseNearToEthTransferCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferToNearCall extends ethereum.Call {
  get inputs(): TransferToNearCall__Inputs {
    return new TransferToNearCall__Inputs(this);
  }

  get outputs(): TransferToNearCall__Outputs {
    return new TransferToNearCall__Outputs(this);
  }
}

export class TransferToNearCall__Inputs {
  _call: TransferToNearCall;

  constructor(call: TransferToNearCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nearReceiverAccountId(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class TransferToNearCall__Outputs {
  _call: TransferToNearCall;

  constructor(call: TransferToNearCall) {
    this._call = call;
  }
}
